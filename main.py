from yt_dlp import YoutubeDL
from dotenv import load_dotenv
import os
import re
import asyncio
from aiogram import F
from aiogram import Bot, Dispatcher
from aiogram.types import Message, FSInputFile, ChatPermissions
from aiogram.filters import CommandStart, Command
import requests
import random
import datetime

# Load API tokens
load_dotenv()
TOKEN = os.getenv('API') # telegram token
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY') # weather token

# Utilities
def escape_markdown(text):
  # markdown syntax for messages
  return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def parse_duration(duration_str):
  #  set mute duration
  duration_str = duration_str.lower().strip()
  match = re.match(r'^(\d+)([yms])$', duration_str) # check number and unit
  if not match:
    # incorrect number or unit
    return None
  
  value, unit = int(match.group(1)), match.group(2) # get number and unit
  
  now = datetime.datetime.utcnow() # current time
  if unit == 's':
    # seconds
    until_date = now + datetime.timedelta(seconds=value)
  elif unit == 'm':
    # minutes
    until_date = now + datetime.timedelta(minutes=value)
  elif unit == 'y':
    # years
    until_date = now + datetime.timedelta(days=365 * value)
  else:
    return None
  
  return until_date

activity_data = {} # contains chats top users

# Initialization
bot = Bot(token=TOKEN) # initialize telegram bot by token
dp = Dispatcher() # handle commands

# Localization
group_languages = {} # contains chats language data

@dp.message(Command('setlang')) # set language in specific chat
async def set_language(message: Message):
  args = message.text.replace('/setlang', '').strip().lower()
  if args not in ['en', 'ru']:
    # incorrect language
    await message.reply(tr(message.chat.id, 'unknown_language'))
    return
  
  group_languages[message.chat.id] = args # set chat language by chat id
  await message.reply(tr(message.chat.id, 'language_set'))
  
def tr(chat_id, key):
  # return value by chat language
  lang = group_languages.get(chat_id, 'en') # defaults
  translation = {
    'greet': {
      'en': 'Hello! My contact: @kznws111',
      'ru': '–ü—Ä–∏–≤–µ—Ç! –ú–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: @kznws111'
    },
    'choose_language': {
      'en': 'Please choose your language: \n\nüá∑üá∫ Russian\nüá¨üáß English',
      'ru': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: \n\nüá∑üá∫ –†—É—Å—Å–∫–∏–π\nüá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
    },
    'language_set': {
      'en': 'Language set: English',
      'ru': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π'
    },
    'unknown_language': {
      'en': 'Use: /setlang ru (üá∑üá∫) or /setlang en (üá¨üáß)',
      'ru': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlang ru (üá∑üá∫) –∏–ª–∏ /setlang en (üá¨üáß)'
    },
    'music_downloading': {
      'en': 'The music is downloading...',
      'ru': '–ú—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
    },
    'song_missing': {
      'en': 'You forgot to provide a link or title!',
      'ru': '–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ!'
    },
    'mute_reply_required': {
      'en': 'Reply to a user you want to mute.',
      'ru': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.'
    },
    'mute_args_required': {
      'en': 'Specify mute time, for example: /mute 5m',
      'ru': '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /mute 5m'
    },
    'mute_success': {
      'en': 'The user is muted for',
      'ru': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞'
    },
    'mute_failed': {
      'en': 'Failed to mute the user:',
      'ru': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
    },
    'incorrect_duration': {
      'en': 'Incorrect time format. Use a number and a unit (y, m, s), e.g. 10m',
      'ru': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (y, m, s), –Ω–∞–ø—Ä–∏–º–µ—Ä 10m'
    },
    'unmute_reply_required': {
      'en': 'Reply to a user you want to unmute.',
      'ru': '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.'
    },
    'unmute_success': {
      'en': 'The user is unmuted',
      'ru': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω'
    },
    'unmute_failed': {
      'en': 'Failed to unmute the user:',
      'ru': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
    },
    'kick_reply_required': {
      'en': 'Please reply to the message of the user you want to kick.',
      'ru': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å.'
    },
    'kick_success': {
      'en': 'The user has been kicked.',
      'ru': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫–∏–∫–Ω—É—Ç.'
    },
    'kick_failed': {
      'en': 'Kick error:',
      'ru': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ:'
    },
    'ban_reply_required': {
      'en': 'Please reply to the message of the user you want to ban.',
      'ru': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.'
    },
    'ban_success': {
      'en': 'The user has been banned.',
      'ru': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.'
    },
    'ban_failed': {
      'en': 'Ban error:',
      'ru': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ:'
    },
    'weather_error': {
      'en': 'Error retrieving weather:',
      'ru': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:'
    },
    'temp': {
      'en': 'Temperature:',
      'ru': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:'
    },
    'conditions': {
      'en': 'Conditions:',
      'ru': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:'
    },
    'wind': {
      'en': 'Wind speed:',
      'ru': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:'
    },
    'video_downloading': {
      'en': 'The video is downloading...',
      'ru': '–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
    },
    'no_title': {
      'en': 'No Title',
      'ru': '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    },
    'no_author': {
      'en': 'Unknown Author',
      'ru': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
    },
    'video_not_found': {
      'en': 'Video not found',
      'ru': '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    },
    'video_error': {
      'en': 'Error downloading video:',
      'ru': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:'
    },
    'no_permissions': {
      'en': 'You do not have permissions',
      'ru': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤'
    },
    'r': {
      'en': ["Do 5 push-ups",
    "Do 10 squats",
    "Do 3 push-ups",
    "Do 15 squats",
    "Do 2 push-ups with a pause at the bottom",
    "Do 12 squats",
    "Do 4 slow push-ups",
    "Do 18 squats",
    "Do 1 push-up with a hold",
    "Do 7 squats with arms up",
    "Do 2 close-grip push-ups",
    "Do 20 squats",
    "Do 3 wide-arm push-ups",
    "Do 6 squats with a pause",
    "Do 4 push-ups without stopping",
    "Do 14 squats",
    "Do 2 slow push-ups",
    "Do 11 squats with closed eyes",
    "Do 5 push-ups while counting out loud",
    "Do 9 squats while smiling",
    "Name a capital city of any country starting with 'C'",
    "Give yourself a compliment",
    "Imagine you're a movie hero. What genre is the movie?",
    "What's your favorite smell?",
    "If you were a color, what color would you be?",
    "Describe yourself in three words",
    "What word do you think is beautiful?",
    "What would you like to be able to do right now?",
    "If you had a dragon, what would you name it?",
    "Say a phrase that would start your novel",
    "What song lifts your mood?",
    "What animal would you have if there were no limits?",
    "Make a surprised face (and believe it)",
    "What was your favorite cartoon as a child?",
    "If you were invisible for a day, what would you do?",
    "Describe your perfect day off",
    "Name 3 things that make you happy",
    "How many tabs do you have open right now?",
    "If you could teleport, where would you go?",
    "Name your favorite book",
    "If you won a million, what would you buy first?",
    "What did you want to be as a child?",
    "If your day were a dish, what would it be?",
    "What‚Äôs a habit of yours that few people know about?",
    "Name any word that starts with the last letter of your name",
    "If you were a superhero, what would your power be?",
    "Say 'Hello' in three languages",
    "How many times did you drink water today?",
    "Describe your day in one word",
    "If you had one wish, what would it be?",
    "What‚Äôs your favorite holiday?",
    "If you opened a caf√©, what would it be called?",
    "Name three things you see around you",
    "What‚Äôs your strangest hobby?",
    "What would you tell yourself 5 years ago?",
    "Which movie character do you relate to most?",
    "What skill would you improve right now?",
    "Name a country you‚Äôd like to visit",
    "If you were a song, which one would you be?",
    "What was your funniest moment in life?",
    "Imagine you‚Äôre a TV host ‚Äî what‚Äôs your show about?",
    "How long could you go without your phone?",
    "Name your favorite dish",
    "Which language would you like to learn?",
    "What do you value most in friends?",
    "Imagine there's no school/work tomorrow ‚Äî what do you do?",
    "If you could change your name, what would it be?",
    "What‚Äôs your favorite weather?",
    "You‚Äôre in a desert. What will you take with you?",
    "If you could have any pet ‚Äî which one?",
    "What funny thing happened to you recently?",
    "What‚Äôs your favorite quote?",
    "Name 3 fruits",
    "What song is stuck in your head right now?",
    "What would you draw if you were an artist?",
    "Name any city you've never been to but want to visit",
    "How many times do you smile a day?",
    "If you were a sport, what would you be?",
    "What‚Äôs your favorite game?",
    "What would you never try?",
    "Name any historical fact",
    "You‚Äôre in a forest. What‚Äôs the first thing you do?",
    "How many hours of sleep do you need to be happy?",
    "If you were a blogger, what would your blog be about?",
    "What movie can you watch over and over?",
    "What‚Äôs your favorite quote or meme?",
    "What do you like most about yourself?",
    "What was your first phone?",
    "Would you rather time travel or read minds?",
    "If you could choose one super subject in school, what would it be?",
    "What‚Äôs the last dream you remember?",
    "If you were a tree ‚Äî what kind would you be?",
    "Where do you see yourself in 5 years?",
    "What would you like to change in the world?",
    "If you had your own life rule, what would it be?",
    "What inspires you to get out of bed in the morning?",
    "Name three qualities of an ideal friend",
    "What can you do that most people can't?",
    "If you were a scent, what would you smell like?",
    "What can you say about yourself in 10 seconds?",
    "What‚Äôs your warmest memory?",
    "Name 3 things you can make from potatoes",
    "Write the names of 50 countries",
    "What‚Äôs your native language?",
    "The biggest country in the world?",
    "Take a photo of what‚Äôs outside your window",
    "For 10 minutes, add swearing to every sentence (voice/text)",
    "For 10 minutes, write and speak only in English",
    "Hide in a closet!!!",
    "Go to the gym with friends in June",
    "Write 8 Russian curse words",
    "If you became president (of any country), what would you do on day one?",
    "How much do you weigh?",
    "How old are you? If you were born 10 years ago ‚Äî how old would you be now?"],
      'ru': ["–°–¥–µ–ª–∞–π 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 3 –æ—Ç–∂–∏–º–∞–Ω–∏—è",
    "–°–¥–µ–ª–∞–π 15 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 2 –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å –ø–∞—É–∑–æ–π –≤–Ω–∏–∑—É",
    "–°–¥–µ–ª–∞–π 12 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 4 –æ—Ç–∂–∏–º–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ",
    "–°–¥–µ–ª–∞–π 18 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 1 –æ—Ç–∂–∏–º–∞–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
    "–°–¥–µ–ª–∞–π 7 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π —Å —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö",
    "–°–¥–µ–ª–∞–π 2 –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º",
    "–°–¥–µ–ª–∞–π 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 3 –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å —à–∏—Ä–æ–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ä—É–∫",
    "–°–¥–µ–ª–∞–π 6 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π —Å –ø–∞—É–∑–æ–π",
    "–°–¥–µ–ª–∞–π 4 –æ—Ç–∂–∏–º–∞–Ω–∏—è –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "–°–¥–µ–ª–∞–π 14 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞–π 2 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏—è",
    "–°–¥–µ–ª–∞–π 11 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
    "–°–¥–µ–ª–∞–π 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Å—á–∏—Ç–∞—è –≤—Å–ª—É—Ö",
    "–°–¥–µ–ª–∞–π 9 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, —É–ª—ã–±–∞—è—Å—å",
    "–ù–∞–∑–æ–≤–∏ —Å—Ç–æ–ª–∏—Ü—É –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –±—É–∫–≤—É –°",
    "–°–∫–∞–∂–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Å–µ–±–µ",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –≥–µ—Ä–æ–π —Ñ–∏–ª—å–º–∞. –ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π –∑–∞–ø–∞—Ö?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª —Ü–≤–µ—Ç–æ–º, —Ç–æ –∫–∞–∫–∏–º?",
    "–û–ø–∏—à–∏ —Å–µ–±—è —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏",
    "–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –∫—Ä–∞—Å–∏–≤—ã–º?",
    "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–º–µ—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
    "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª –¥—Ä–∞–∫–æ–Ω, –∫–∞–∫ –±—ã —Ç—ã –µ–≥–æ –Ω–∞–∑–≤–∞–ª?",
    "–°–∫–∞–∂–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–π –±—ã –Ω–∞—á–∞–ª—Å—è —Ç–≤–æ–π —Ä–æ–º–∞–Ω",
    "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è —Ç–µ–±–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
    "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç—ã –±—ã –∑–∞–≤—ë–ª, –µ—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?",
    "–°–¥–µ–ª–∞–π –º–∏–º–∏–∫—É, –±—É–¥—Ç–æ —Ç—ã —É–¥–∏–≤–ª—ë–Ω (–∏ –ø–æ–≤–µ—Ä—å –≤ —ç—Ç–æ)",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ã–ª –ª—é–±–∏–º—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º –≤ –¥–µ—Ç—Å—Ç–≤–µ?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã —Å—Ç–∞–ª –Ω–µ–≤–∏–¥–∏–º–∫–æ–π –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª?",
    "–û–ø–∏—à–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π",
    "–°–∫–∞–∂–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è —Ä–∞–¥—É—é—Ç",
    "–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –≤–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫—É–¥–∞ –±—ã —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è?",
    "–ù–∞–∑–æ–≤–∏ —Å–≤–æ—é –ª—é–±–∏–º—É—é –∫–Ω–∏–≥—É",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –≤—ã–∏–≥—Ä–∞–ª –º–∏–ª–ª–∏–æ–Ω, –Ω–∞ —á—Ç–æ –±—ã —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?",
    "–ö–µ–º —Ç—ã —Ö–æ—Ç–µ–ª –±—ã—Ç—å –≤ –¥–µ—Ç—Å—Ç–≤–µ?",
    "–ï—Å–ª–∏ –±—ã —Ç–≤–æ–π –¥–µ–Ω—å –±—ã–ª –±–ª—é–¥–æ–º, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ø—Ä–∏–≤—ã—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–∞–ª–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç?",
    "–ù–∞–∑–æ–≤–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º, –≤ —á—ë–º –±—ã–ª–∞ –±—ã —Ç–≤–æ—è —Å–∏–ª–∞?",
    "–°–∫–∞–∂–∏ ¬´–ü—Ä–∏–≤–µ—Ç¬ª –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö",
    "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏–ª –≤–æ–¥—É?",
    "–û–ø–∏—à–∏ —Å–≤–æ–π —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º",
    "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–æ –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ ‚Äî —á–µ–≥–æ –±—ã —Ç—ã –ø–æ–∂–µ–ª–∞–ª?",
    "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–∞—Ñ–µ, –∫–∞–∫ –±—ã –æ–Ω–æ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å?",
    "–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å –≤–æ–∫—Ä—É–≥ —Å–µ–±—è",
    "–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Å–∞–º–æ–µ —Å—Ç—Ä–∞–Ω–Ω–æ–µ —Ö–æ–±–±–∏?",
    "–ß—Ç–æ –±—ã —Ç—ã —Å–∫–∞–∑–∞–ª —Å–µ–±–µ 5 –ª–µ—Ç –Ω–∞–∑–∞–¥?",
    "–ö–∞–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ —Ñ–∏–ª—å–º–∞ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ç—ã –±—ã –ø—Ä–æ–∫–∞—á–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
    "–ù–∞–∑–æ–≤–∏ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–±—ã–≤–∞—Ç—å",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –ø–µ—Å–Ω–µ–π, –∫–∞–∫–∞—è –±—ã —Ç—ã –±—ã–ª–∞?",
    "–ö–∞–∫–æ–π –±—ã–ª —Ç–≤–æ–π —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –º–æ–º–µ–Ω—Ç –≤ –∂–∏–∑–Ω–∏?",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –≤–µ–¥—É—â–∏–π –¢–í-—à–æ—É ‚Äî –æ —á—ë–º –æ–Ω–æ?",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –±—ã –≤—ã–¥–µ—Ä–∂–∞–ª –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
    "–ù–∞–∑–æ–≤–∏ —Å–≤–æ—ë –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ",
    "–ö–∞–∫–æ–π —è–∑—ã–∫ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –≤—ã—É—á–∏—Ç—å?",
    "–ß—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω–∏—à—å –≤ –¥—Ä—É–∑—å—è—Ö?",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç —à–∫–æ–ª—ã/—Ä–∞–±–æ—Ç—ã ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ —Å–º–µ–Ω–∏—Ç—å –∏–º—è, –∫–∞–∫ –±—ã —Ç—ã —Ç–µ–ø–µ—Ä—å –∑–≤–∞–ª—Å—è?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞?",
    "–¢—ã –≤ –ø—É—Å—Ç—ã–Ω–µ. –ß—Ç–æ –≤–æ–∑—å–º–µ—à—å —Å —Å–æ–±–æ–π?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –∑–∞–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî –∫–æ–≥–æ –≤—ã–±—Ä–∞–ª –±—ã?",
    "–ß—Ç–æ —Å–º–µ—à–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å —Ç–æ–±–æ–π –Ω–µ–¥–∞–≤–Ω–æ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è —Ü–∏—Ç–∞—Ç–∞?",
    "–ù–∞–∑–æ–≤–∏ 3 —Ñ—Ä—É–∫—Ç–∞",
    "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è —Å–µ–π—á–∞—Å —É —Ç–µ–±—è –≤ –≥–æ–ª–æ–≤–µ?",
    "–ß—Ç–æ –±—ã —Ç—ã –Ω–∞—Ä–∏—Å–æ–≤–∞–ª, –µ—Å–ª–∏ –±—ã –±—ã–ª —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º?",
    "–ù–∞–∑–æ–≤–∏ –ª—é–±–æ–π –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–µ –±—ã–ª, –Ω–æ —Ö–æ—á–µ—à—å –ø–æ–±—ã–≤–∞—Ç—å",
    "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã —É–ª—ã–±–∞–µ—à—å—Å—è?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞, –∫–∞–∫–∏–º –±—ã –±—ã–ª?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–∞?",
    "–ß—Ç–æ –±—ã —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª?",
    "–ù–∞–∑–æ–≤–∏ –ª—é–±–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç",
    "–¢—ã –≤ –ª–µ—Å—É. –ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?",
    "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–Ω–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–ª—è —Å—á–∞—Å—Ç—å—è?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã —Å—Ç–∞–ª –±–ª–æ–≥–µ—Ä–æ–º, –æ —á—ë–º –±—ã–ª –±—ã —Ç–≤–æ–π –±–ª–æ–≥?",
    "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ª—é–±–∏–º–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ –º–µ–º?",
    "–ß—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Å–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ã–ª –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω?",
    "–¢—ã –±—ã –ø—Ä–µ–¥–ø–æ—á—ë–ª –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —á–∏—Ç–∞—Ç—å –º—ã—Å–ª–∏?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω —Å—É–ø–µ—Ä–ø—Ä–µ–¥–º–µ—Ç –≤ —à–∫–æ–ª–µ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?",
    "–ö–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–Ω —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –¥–µ—Ä–µ–≤–æ–º ‚Äî –∫–∞–∫–∏–º?",
    "–ö–µ–º —Ç—ã —Å–µ–±—è –≤–∏–¥–∏—à—å —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?",
    "–ß—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ –º–∏—Ä–µ?",
    "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–æ —Å–≤–æ—ë –ø—Ä–∞–≤–∏–ª–æ –∂–∏–∑–Ω–∏, –∫–∞–∫ –±—ã –æ–Ω–æ –∑–≤—É—á–∞–ª–æ?",
    "–ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —É—Ç—Ä–æ–º –≤—Å—Ç–∞—Ç—å —Å –∫—Ä–æ–≤–∞—Ç–∏?",
    "–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥—Ä—É–≥–∞",
    "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å, —á–µ–≥–æ –Ω–µ —É–º–µ—é—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ?",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –∑–∞–ø–∞—Ö–æ–º, —á–µ–º –±—ã —Ç—ã –ø–∞—Ö?",
    "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ –∑–∞ 10 —Å–µ–∫—É–Ω–¥?",
    "–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Å–∞–º–æ–µ —Ç—ë–ø–ª–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
    "–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—à–∫–∏",
    "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è 50 —Å—Ç—Ä–∞–Ω",
    "–ö–∞–∫–æ–π —Ç–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫?",
    "–°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –º–∏—Ä–µ?",
    "–°—Ñ–æ—Ç–∫–∞–π —Ç–æ —á—Ç–æ –≤ –æ–∫–Ω–µ",
    "–í —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç –¥–æ–±–∞–≤–ª—è–π –≤ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ç—É(–≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç)",
    "–í —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç –ø–∏—à–∏ –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
    "–°–ø—Ä—è—á—å—Å—è –≤ —à–∫–∞—Ñ—É!!!",
    "–°—Ö–æ–¥–∏ –≤ –∏—é–Ω–µ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª —Å –¥—Ä—É–∑—å—è–º–∏",
    "–ù–∞–ø–∏—à–∏ 8 –º–∞—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
    "–ï—Å–ª–∏ –±—ã —Ç—ã —Å—Ç–∞–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º (–Ω–∞ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∞), —Ç–æ —á—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å?",
    "–°–∫–æ–ª—å–∫–æ —Ç—ã –≤–µ—Å–∏—à—å?"
    "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ï—Å–ª–∏ –±—ã —Ç—ã —Ä–æ–¥–∏–ª—Å—è 10 –ª–µ—Ç –Ω–∞–∑–∞–¥ - —Ç–æ —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –±—ã —Å–µ–π—á–∞—Å?"]
    },
    'help': {
      'en': """Hello! Here are the commands you can use:\n
/start - Greet the bot and get contact info
/setlang [ru üá∑üá∫ or en üá¨üáß] - Set language
/song [name or link] - Download music from YouTube
/tiktok - Download TikTok videos or just send a TikTok link to download automatically
/weather [location] - Get current weather by location
/r - Get a random task
/mute [reply] - Mute a user in the group (admin only)
/unmute [reply] - Unmute a user in the group (admin only)
/kick [reply] - Remove a user from the group (admin only)
/ban [reply] - Ban a user from the group (admin only)
/unban [reply] - Unban a user in the group (admin only)
    """,
      'ru': """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n
/start - –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/setlang [ru üá∑üá∫ –∏–ª–∏ en üá¨üáß] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ —á–∞—Ç–∞
/song [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫–∞] - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É —Å YouTube
/tiktok - –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ TikTok, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
/weather - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
/r - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
/mute [reply] - –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
/unmute [reply] - –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/kick [reply] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/ban [reply] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/unban [reply] - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
      """
    }
  }
  
  return translation.get(key, {}).get(lang, key)

# General commands
async def main():
  # get updates
  await dp.start_polling(bot)
  
@dp.message(CommandStart()) # greetings and contact
async def cmd_start(message: Message):
  if message.chat.id not in group_languages:
    await message.reply(tr(message.chat.id, 'choose_language'))
  else:
    await message.reply(tr(message.chat.id, 'greet'))
  
@dp.message(Command('help')) # all commands
async def cmd_help(message: Message):
  help_text = tr(message.chat.id, 'help')
  await message.reply(help_text)

# User management commands
@dp.message(Command('mute')) # mute user for a certain time
async def mute_user(message: Message):
  # get IDs
  user_id = message.reply_to_message.from_user.id
  chat_id = message.chat.id
  
  chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)

  # No permissions
  if chat_member.status not in ['creator', 'administrator'] \
   or (chat_member.status == 'administrator' and not getattr(chat_member, "can_restrict_members", False)):
    await message.reply(tr(message.chat.id, 'no_permissions'))
    return
  
  if not message.reply_to_message:
    # if haven't tagged the user
    await message.reply(tr(message.chat.id, 'mute_reply_required'))
    return
  
  target_member = await message.bot.get_chat_member(chat_id, user_id)
  if target_member.status in ('creator', 'administrator'):
      await message.reply(tr(chat_id, 'no_permissions'))
      return
  
  _, _, tail = (message.text or '').partition(' ') # get everything after the first space (if there is no space => no args)
  args = tail.strip()
  
  until_date = None
  if args:
    parsed = parse_duration(args)
    if parsed:
      until_date = parsed
    else:
      until_date = None
  
  default_permissions = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False,
  )
  
  try:
    await message.bot.restrict_chat_member(
      chat_id=chat_id,
      user_id=user_id,
      permissions=default_permissions,
      until_date=int(until_date.timestamp()) if until_date else None
    )
    
    await message.reply(f'{tr(chat_id, 'mute_success')}')
  except Exception as e:
    await message.reply(f'{tr(chat_id, 'mute_failed')} {e}')

@dp.message(Command('unmute')) # unmute user for a certain time
async def unmute_user(message: Message):
  # get IDs
  user_id = message.reply_to_message.from_user.id
  chat_id = message.chat.id
  
  chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
  
  # No permissions
  if chat_member.status not in ['creator', 'administrator'] \
  or (chat_member.status == 'administrator' and not getattr(chat_member, "can_restrict_members", False)):
    await message.reply(tr(message.chat.id, 'no_permissions'))
    return
  
  if not message.reply_to_message:
    # if haven't tagged the user
    await message.reply(tr(message.chat.id, 'unmute_reply_required'))
    return
  
  
  try:
    default_permissions = ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_polls=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True,
        can_change_info=True,
        can_invite_users=True,
        can_pin_messages=True,
    )

    await bot.restrict_chat_member(
        chat_id=chat_id,
        user_id=user_id,
        permissions=default_permissions
    )
    await message.reply(f'{tr(chat_id, 'unmute_success')}')
  except Exception as e:
    await message.reply(f'{tr(chat_id, 'unmute_failed')} {e}')

@dp.message(Command('kick')) # kick user
async def kick_user(message: Message):
  # get IDs
  user_id = message.reply_to_message.from_user.id
  chat_id = message.chat.id
  
  chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
  
  # No permissions
  if chat_member.status not in ['creator', 'administrator'] \
   or (chat_member.status == 'administrator' and not getattr(chat_member, "can_restrict_members", False)):
    await message.reply(tr(message.chat.id, 'no_permissions'))
    return
  
  if not message.reply_to_message:
    # if haven't tagged the user
    await message.reply(tr(message.chat.id, 'kick_reply_required'))
    return
  
  target_member = await message.bot.get_chat_member(chat_id, user_id)
  if target_member.status in ('creator', 'administrator'):
    await message.reply(tr(chat_id, 'no_permissions'))
    return
  
  try:
    await bot.ban_chat_member(chat_id, user_id, until_date=0) # ban
    await bot.unban_chat_member(chat_id, user_id) # unban
    
    await message.reply(tr(chat_id, 'kick_success'))
  except Exception as e:
    await message.reply(f'{tr(chat_id), 'kick_failed'} {e}')

@dp.message(Command('ban')) # ban user
async def ban_user(message: Message):
  # get IDs
  user_id = message.reply_to_message.from_user.id
  chat_id = message.chat.id
  
  chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
  
  # No permissions
  if chat_member.status not in ['creator', 'administrator'] \
   or (chat_member.status == 'administrator' and not getattr(chat_member, "can_restrict_members", False)):
    await message.reply(tr(message.chat.id, 'no_permissions'))
    return
  
  if not message.reply_to_message:
    # if haven't tagged the user
    await message.reply(tr(message.chat.id, 'ban_reply_required'))
    return
  
  target_member = await message.bot.get_chat_member(chat_id, user_id)
  if target_member.status in ('creator', 'administrator'):
    await message.reply(tr(chat_id, 'no_permissions'))
    return
  
  try:
    await bot.ban_chat_member(chat_id, user_id) # ban
    
    await message.reply(tr(chat_id, 'ban_success'))
  except Exception as e:
    await message.reply(f'{tr(chat_id), 'ban_failed'} {e}')

@dp.message(Command('unban')) # unban user
async def unban_user(message: Message):
  # get IDs
  user_id = message.reply_to_message.from_user.id
  chat_id = message.chat.id
  
  chat_member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
  
  # No permissions
  if chat_member.status not in ['creator', 'administrator'] \
   or (chat_member.status == 'administrator' and not getattr(chat_member, "can_restrict_members", False)):
    await message.reply(tr(message.chat.id, 'no_permissions'))
    return
  
  if not message.reply_to_message:
    # if haven't tagged the user
    await message.reply(tr(message.chat.id, 'ban_reply_required'))
    return
  
  try:
    await bot.unban_chat_member(chat_id, user_id) # unban
    await message.reply(tr(chat_id, 'ban_success'))
  except Exception as e:
    await message.reply(f'{tr(chat_id), 'ban_failed'} {e}')

# Interacting commands
@dp.message(Command('r')) # random task
async def cmd_r(message: Message):
  await message.reply(random.choice(tr(message.chat.id, 'r')))
  
@dp.message(Command('song')) # send audio
async def cmd_song(message: Message):
  query = message.text.replace('/song', '').strip()
  
  if not query:
    # incorrect song
    await message.reply(tr(message.chat.id, 'song_missing'))
    return
    
  if not query.startswith('http'):
    query = f'ytsearch:{query}'
    
  loading_msg = await message.reply(tr(message.chat.id, 'music_downloading'))
  
  try:
    ydl_opts = {
      'format': 'bestaudio/best',
      'outtmpl': 'song.%(ext)s',
      'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
      }],
      'quiet': True,
    }
    
    with YoutubeDL(ydl_opts) as ydl:
      ydl.download([query])
      
    audio = FSInputFile('song.mp3') # audio name
    await message.reply_audio(audio)
    
    os.remove('song.mp3') # remove audio
    
  except Exception as e:
    print(f'–û—à–∏–±–∫–∞: {e}')
    
  try:
    await loading_msg.delete()
  except:
    pass

@dp.message(Command('weather')) # current weather in region
async def get_weather(message: Message):
  location = message.text.replace('/weather', '').strip()
  
  if location == '':
    await message.reply('')
    return
  
  try:
    base_url = f'https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{location}/today'
    params = {
      'unitGroup': 'metric',
      'include': 'current',
      'key': WEATHER_API_KEY,
      'contentType': 'json'
    }
    
    response = requests.get(base_url, params=params)
    data = response.json()
    
    if 'currentConditions' in data:
      place = data['resolvedAddress']
      current = data['currentConditions']
      temp = current['temp']
      conditions = current['conditions']
      wind_speed = current['windspeed']
      result = (
        f'üìç {place}\n\n'
        f'üå° {tr(message.chat.id, 'temp')} {temp}¬∞C\n'
        f'‚òÅÔ∏è {tr(message.chat.id, 'conditions')} {conditions}\n'
        f'üí® {tr(message.chat.id, 'wind')} {wind_speed} km/h'
      )
      await message.reply(result)
      
  except Exception as e:
    await message.reply(f'{tr(message.chat.id, 'weather_error')} {e}')

@dp.message(F.text) # handle each chat message
async def tiktok_handle_requests(message: Message):
  text = message.text.strip()

  if 'tiktok.com' in text:
    await tiktok_download(message)
    
  if message.chat.type == 'private':
    return
  
  # get IDs
  chat_id = message.chat.id
  user_id = message.from_user.id
  username = message.from_user.username or message.from_user.full_name
  
  if chat_id not in activity_data:
    activity_data[chat_id] = {}
    
  if user_id not in activity_data[chat_id]:
    activity_data[chat_id][user_id] = {'username': username, 'messages': 0}
    
  activity_data[chat_id][user_id]['messages'] += 1

@dp.message(Command('tiktok')) # download tiktok videos
async def tiktok_download(message: Message):
  query = message.text.replace('/tiktok', '').strip()
  loading_msg = await message.reply(tr(message.chat.id, 'video_downloading'))

  try:
    ydl_opts = {
      'outtmpl': 'tiktok.mp4',
      'format': 'mp4',
      'quiet': True,
      'writesubtitles': True,
      'writeinjson': True,
      'skip_download': False,
      'cookiefile': os.path.join(os.getcwd(), 'cookies.txt'),
    }

    with YoutubeDL(ydl_opts) as ydl:
      info = ydl.extract_info(query.strip(), download=True)
      
    # video info
    title = escape_markdown(info.get('title', tr(message.chat.id, 'no_title')))
    author = escape_markdown(info.get('uploader', tr(message.chat.id, 'no_author')))
    
    caption_text = f'*{title}* ‚Äî {author}\n\n[Schmidt Talk Bot](https://t.me/schmidt_talk_bot)'

    filename = 'tiktok.mp4'
    
    if os.path.exists(filename):
      video = FSInputFile(filename)
      await message.reply_video(video, caption=caption_text, parse_mode='MarkdownV2')
      
      try:
        os.remove(filename)
      except Exception as e:
        print(f'File remove error: {e}')
    else:
      await message.reply(tr(message.chat.id, 'video_not_found'))

  except Exception as e:
    await message.reply(f'{tr(message.chat.id, 'video_error')} {e}')

  try:
    await loading_msg.delete()
  except:
    pass

# start the bot
if __name__ == '__main__':
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    # catches the stop
    print('The bot is off!')